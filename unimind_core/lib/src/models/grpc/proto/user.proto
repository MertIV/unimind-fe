syntax = "proto3";

import "server.proto";
import "google/protobuf/timestamp.proto";

message User{
    optional string user_id = 1;
    optional string email = 2;
    optional string phone = 3;
    optional payment_info_id_list payment_info_id_list = 4;
    optional string fullname = 5;
    optional google.protobuf.Timestamp birth_date = 6;
    optional UserType type = 7;
    optional user_metadata user_metadata = 8;

    optional google.protobuf.Timestamp created_at = 9;
    optional google.protobuf.Timestamp updated_at = 10;   
    optional bool is_archived = 11;
}

message user_metadata {
    repeated Question list = 8;
}

message payment_info_id_list{
    repeated string list =1;
}

message Question{
    optional string title = 1;
    repeated string options = 2;
    optional string selected_answer = 3;
}

message FcmToken{
    string device_id = 1;
    string fcm_token = 2;
}


enum UserType{
    PSYCHIATRIST = 0;
    PATIENT = 1;
}

message UserRequest{
    User user = 1;
}

message LoginRequest{
    string email = 1;
    string phone = 2;
}

message LoginResponse{
    string message = 1; //LoginRequest email veya phone olma durumuna göre mesaj dönülecektir. Örn "ulaskasim0@gmail.com" email adresinize giriş şifresi yolladık. +905316709790 telefon numarasına giriş şifresi yolladık. 
    uint32 duration = 2; //saniye cinsinden gelicek örn 180
    string error = 3; //Hata yoksa boş string dönücek. Varsa hata içeriği dönücek
}

message VerificationRequest{
    string email = 1;
    string phone = 2;
    string code = 3;
}

message VerificationResponse{
    string token = 1;
    string user_id = 2;
    string error = 3;
}

message FcmTokenRequest{
    string user_id = 1;
    FcmToken fcmToken = 2;
}

service LoginService{
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc LoginVerification(VerificationRequest) returns (VerificationResponse);
    rpc Logout(IdRequest) returns (StringResponse);
}

service UserService{
    rpc GetByID(IdRequest) returns (User);
    rpc Register(UserRequest) returns (LoginResponse);
    rpc RegisterVerification(VerificationRequest) returns (VerificationResponse);
    rpc Update(UserRequest) returns (User);
    rpc Delete(IdRequest) returns (StringResponse);
    // rpc Archive(IdRequest) returns (StringResponse);
    // rpc Recover(IdRequest) returns (StringResponse);
    rpc SetFcmToken(FcmTokenRequest) returns (StringResponse);
}